--CREO EL TIPO ENUMERADO QUE VAMOS A USAR
CREATE TYPE chiches AS ENUM ('Pizarra','Proyector','Pizarron','Ventilador');
CREATE TYPE situation AS ENUM ('ACTIVO','INACTIVO','BAJA');
CREATE TYPE dias AS ENUM ('lunes','martes','miercoles','jueves','viernes','sabado');
CREATE TYPE period AS ENUM ('primer cuatrimestre','segundo cuatrimestre','anual');
CREATE TYPE state AS ENUM ('AUTORIZADA','PENDIENTE','FINALIZADA','RECHAZADA');
CREATE TABLE IF NOT EXISTS usuarios(
    id SERIAL PRIMARY KEY,
    username text NOT NULL CHECK (username <> ''),
    password text NOT NULL CHECK (password <> ''),
    state situation DEFAULT 'ACTIVO',
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);
CREATE TABLE IF NOT EXISTS edificio(
    id SERIAL PRIMARY KEY,
    nombre text NOT NULL CHECK (nombre <> ''),
    direccion text NOT NULL CHECK (direccion <> ''),
    state situation DEFAULT 'ACTIVO',
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

DROP TABLE IF EXISTS aulas;
CREATE TABLE IF NOT EXISTS aulas(
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    nombre text NOT NULL CHECK (nombre <> ''),
    numero integer NOT NULL,
    "edificioId" smallint,
    capacidad integer NOT NULL,
    ubicacion text NOT NULL CHECK (ubicacion <> ''),
    state situation DEFAULT 'ACTIVO',
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY ("edificioId") REFERENCES edificio(id)
);
CREATE TABLE IF NOT EXISTS extras(
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "aulaId" smallint REFERENCES aulas(id),
    extra chiches
);
CREATE TABLE IF NOT EXISTS facultad(
    id SERIAL PRIMARY KEY,
    nombre text NOT NULL CHECK (nombre <> ''),
    state situation DEFAULT 'ACTIVO',
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);
CREATE TABLE IF NOT EXISTS carrera(
    id SERIAL PRIMARY KEY,
    nombre text NOT NULL CHECK (nombre <> ''),   
    "facultadId" smallint,
    state situation DEFAULT 'ACTIVO',
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY ("facultadId") REFERENCES facultad(id)
);
CREATE TABLE IF NOT EXISTS docente(
    id SERIAL PRIMARY KEY,
    nombre text NOT NULL CHECK (nombre <> ''),
    apellido text NOT NULL CHECK (apellido <> ''),
    legajo text NOT NULL CHECK (legajo <> ''),
    dni integer NOT NULL,
    "usuarioId" smallint,
    state situation DEFAULT 'ACTIVO',
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY ("usuarioId") REFERENCES usuarios(id)
);
CREATE TABLE IF NOT EXISTS administrador(
    id SERIAL PRIMARY KEY,
    nombre text NOT NULL CHECK (nombre <> ''),
    apellido text NOT NULL CHECK (apellido <> ''),
    legajo text NOT NULL CHECK (legajo <> ''),
    dni integer NOT NULL,
    "usuarioId" smallint,
    state situation DEFAULT 'ACTIVO',
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY ("usuarioId") REFERENCES usuarios(id)
);
CREATE TABLE IF NOT EXISTS materia(
    id SERIAL PRIMARY KEY,
    nombre text NOT NULL CHECK (nombre <> ''),
    periodo period,
    anio integer NOT NULL,
    cod integer UNIQUE,
    state situation DEFAULT 'ACTIVO',
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);
CREATE TABLE IF NOT EXISTS reserva(
    id SERIAL PRIMARY KEY,
    dia dias,
    horaInicio integer NOT NULL,
    horaFin integer NOT NULL,
    estado state,
    "aulaId" smallint REFERENCES aulas(id),
    "docenteId" smallint REFERENCES docente(id),
    state situation DEFAULT 'ACTIVO',
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);
CREATE TABLE IF NOT EXISTS reservaMateria(
    "reservaId" smallint REFERENCES reserva(id),
    "materiaId" integer REFERENCES materia(cod),
    state situation DEFAULT 'ACTIVO',
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    PRIMARY KEY ("reservaId","materiaId")
);
CREATE TABLE IF NOT EXISTS carreraMateria(
    "materiaId" integer REFERENCES materia(cod),
    "carreraId" smallint REFERENCES carrera(id),
    state situation DEFAULT 'ACTIVO',
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    PRIMARY KEY ("materiaId","carreraId")
);
CREATE TABLE IF NOT EXISTS reservaAdmin(
    "reservaId" smallint REFERENCES reserva(id),
    "administradorId" integer REFERENCES administrador(id),
    state situation DEFAULT 'ACTIVO',
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    PRIMARY KEY ("reservaId","administradorId")
);
CREATE OR REPLACE FUNCTION update_updated_at()
  RETURNS TRIGGER AS $$
  BEGIN
      NEW."updatedAt" = now();
      RETURN NEW;
  END;
  $$ language 'plpgsql';
CREATE TRIGGER tr_edificio BEFORE UPDATE ON edificio FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at ();
CREATE TRIGGER tr_aulas BEFORE UPDATE ON aulas FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at ();
CREATE TRIGGER tr_facultad BEFORE UPDATE ON facultad FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at ();
CREATE TRIGGER tr_carrera BEFORE UPDATE ON carrera FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at ();
CREATE TRIGGER tr_usuarios BEFORE UPDATE ON usuarios FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at ();
CREATE TRIGGER tr_docente BEFORE UPDATE ON docente FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at ();
CREATE TRIGGER tr_administrador BEFORE UPDATE ON administrador FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at ();
CREATE TRIGGER tr_reserva BEFORE UPDATE ON reserva FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at ();
CREATE TRIGGER tr_reservamateria BEFORE UPDATE ON reservamateria FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at ();
CREATE TRIGGER tr_materia BEFORE UPDATE ON materia FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at ();
CREATE TRIGGER tr_carreramateria BEFORE UPDATE ON carreramateria FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at ();
CREATE TRIGGER tr_reservaadmin BEFORE UPDATE ON reservaadmin FOR EACH ROW
    EXECUTE PROCEDURE update_updated_at ();

    INSERT INTO edificio(nombre,direccion) VALUES ('bloque 2','Ejercito de Los Andes 950, Ciudad de San Luis, Provincia de San Luis D5700HHW'),('bloque 1','Ejercito de Los Andes 950, Ciudad de San Luis, Provincia de San Luis D5700HHW'),('bloque 4','Ejercito de Los Andes 950, Ciudad de San Luis, Provincia de San Luis D5700HHW');
    INSERT INTO aulas(nombre,numero,"edificioId",capacidad,ubicacion) VALUES ('aula',58,1,50,'planta baja'),('sala',7,1,15,'planta baja'),('aula',32,2,50,'planta baja');
    INSERT INTO extras("aulaId",extra) VALUES (1,'Pizarron'),(2,'Proyector'),(2,'Pizarra'),(3,'Proyector'),(3,'Pizarron');
    insert into facultad (nombre)
    VALUES ('Facultad de Qu庵ica, Bioqu庵ica y Farmacia'),
    ('Facultad de Ciencias F押ico-Matem磬icas y Naturales'),
    ('Facultad de Ciencias Humanas'),
    ('Instituto Polit匐nico y Art押tico Universitario'),
    ('Facultad de Ciencias de la Salud'),
    ('Facultad de Psicolog眼'),
    ('Facultad de Turismo y Urbanismo'),
    ('Facultad de Ingenier眼 y Ciencias Agropecuarias'),
    ('Facultad de Ciencias Econ藻icas Jur顔icas Y Sociales');

    INSERT INTO carrera(nombre,"facultadId") VALUES 
    ('ANALISTA BIOL휺ICO',1),
    ('ANALISTA QU펤ICO',1),
    ('BIOQU펤ICA',1),
    ('FARMACIA',1),
    ('LICENCIATURA EN BIOLOG페 MOLECULAR',1),
    ('LICENCIATURA EN BIOQU펤ICA',1),
    ('LICENCIATURA EN BIOTECNOLOG페',1),
    ('LICENCIATURA EN CIENCIAS BIOL휺ICAS',1),
    ('LICENCIATURA EN QU펤ICA',1), 
    ('INGENIER페 EN INFORM쳆ICA',2),
    ('INGENIER페 EN COMPUTACI흁',2),
    ('INGENIER페 EN MINAS',2),
    ('LICENCIATURA EN F펩ICA',2),
    ('PROFESORADO EN MATEM쳆ICA',2),
    ('LICENCIATURA EN CIENCIAS DE LA COMPUTACI흁',2),
    ('PERIODISMO',3),    
    ('TECNICO UNIVERSITARIO EN PRODUCCI흁 MUSICAL',3),  
    ('TECNICATURA UNIVERSITARIA EN PRODUCCI흁 MUSICAL',3),  
    ('CICLO DE LICENCIATURA EN LENGUA INGLESA',3),  
    ('LICENCIATURA EN COMUNICACION SOCIAL',3),  
    ('LICENCIATURA EN PERIODISMO',3),  
    ('LOCUTOR NACIONAL',3),  
    ('Ingenier眼 Qu庵ica',4),  
    ('Ingenier眼 Agron藻ica',4),
    ('Ingenier眼 Electromec烱ica',4),
    ('Ingenier眼 Mecatr蚤ica',4);
    
    INSERT INTO materia(nombre,periodo,anio,cod)  VALUES
    ('Estructura de datos y algoritmos','segundo cuatrimestre',1,1),
    ('Calculo I','primer cuatrimestre',1,1),
    ('Ingenieria web','primer cuatrimestre',4,1'Fisica I','segundo cuatrimestre',2,2),
    ('Probabilidad y estadistica','primer cuatrimestre',2,3),
    ('Ingles','anual',1,4);
    INSERT INTO carreramateria("materiaId","carreraId") VALUES
    (2,10),
    (2,11),
    (2,12),
    (2,13),
    (2,14),
    (2,15),
    (2,16),
    (5,10),
    (5,11),
    (5,12),
    (1,10),
    (1,11),
    (1,12),
    (4,10),
    (4,11),
    (3,10),
    (3,11);


    INSERT INTO reserva() VALUES
    
    INSERT INTO docente(nombre,apellido,legajo,dni,"usuarioId") VALUES ('Mario', 'Silvestri', '355917',40651678, 'mSilvestri777')
    
    
    INSERT INTO facultad() VALUES
